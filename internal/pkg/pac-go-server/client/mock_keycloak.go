// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/PDeXchange/pac/internal/pkg/pac-go-server/client (interfaces: Keycloak)

// Package client is a generated GoMock package.
package client

import (
	reflect "reflect"

	gocloak "github.com/Nerzal/gocloak/v13"
	gomock "github.com/golang/mock/gomock"
)

// MockKeycloak is a mock of Keycloak interface.
type MockKeycloak struct {
	ctrl     *gomock.Controller
	recorder *MockKeycloakMockRecorder
}

// MockKeycloakMockRecorder is the mock recorder for MockKeycloak.
type MockKeycloakMockRecorder struct {
	mock *MockKeycloak
}

// NewMockKeycloak creates a new mock instance.
func NewMockKeycloak(ctrl *gomock.Controller) *MockKeycloak {
	mock := &MockKeycloak{ctrl: ctrl}
	mock.recorder = &MockKeycloakMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeycloak) EXPECT() *MockKeycloakMockRecorder {
	return m.recorder
}

// AddUserToGroup mocks base method.
func (m *MockKeycloak) AddUserToGroup(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToGroup indicates an expected call of AddUserToGroup.
func (mr *MockKeycloakMockRecorder) AddUserToGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToGroup", reflect.TypeOf((*MockKeycloak)(nil).AddUserToGroup), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockKeycloak) DeleteUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockKeycloakMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockKeycloak)(nil).DeleteUser), arg0)
}

// DeleteUserFromGroup mocks base method.
func (m *MockKeycloak) DeleteUserFromGroup(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserFromGroup indicates an expected call of DeleteUserFromGroup.
func (mr *MockKeycloakMockRecorder) DeleteUserFromGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromGroup", reflect.TypeOf((*MockKeycloak)(nil).DeleteUserFromGroup), arg0, arg1)
}

// GetClient mocks base method.
func (m *MockKeycloak) GetClient() *gocloak.GoCloak {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*gocloak.GoCloak)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockKeycloakMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockKeycloak)(nil).GetClient))
}

// GetGroups mocks base method.
func (m *MockKeycloak) GetGroups() ([]*gocloak.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups")
	ret0, _ := ret[0].([]*gocloak.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockKeycloakMockRecorder) GetGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockKeycloak)(nil).GetGroups))
}

// GetUser mocks base method.
func (m *MockKeycloak) GetUser(arg0 string) (*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockKeycloakMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockKeycloak)(nil).GetUser), arg0)
}

// GetUserGroups mocks base method.
func (m *MockKeycloak) GetUserGroups(arg0 string) ([]*gocloak.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGroups", arg0)
	ret0, _ := ret[0].([]*gocloak.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroups indicates an expected call of GetUserGroups.
func (mr *MockKeycloakMockRecorder) GetUserGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroups", reflect.TypeOf((*MockKeycloak)(nil).GetUserGroups), arg0)
}

// GetUserID mocks base method.
func (m *MockKeycloak) GetUserID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockKeycloakMockRecorder) GetUserID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockKeycloak)(nil).GetUserID))
}

// GetUserInfo mocks base method.
func (m *MockKeycloak) GetUserInfo() (*gocloak.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo")
	ret0, _ := ret[0].(*gocloak.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockKeycloakMockRecorder) GetUserInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockKeycloak)(nil).GetUserInfo))
}

// GetUsers mocks base method.
func (m *MockKeycloak) GetUsers() ([]*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockKeycloakMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockKeycloak)(nil).GetUsers))
}

// IsRole mocks base method.
func (m *MockKeycloak) IsRole(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRole", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRole indicates an expected call of IsRole.
func (mr *MockKeycloakMockRecorder) IsRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRole", reflect.TypeOf((*MockKeycloak)(nil).IsRole), arg0)
}
